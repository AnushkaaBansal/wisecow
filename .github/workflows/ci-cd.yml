name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: wisecow
  KUBE_NAMESPACE: wisecow
  KUBERNETES_VERSION: v1.27.0

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        # Enable debugging
        set -ex
        
        echo "=== Building Image ==="
        
        # Build the image with the local tag
        docker buildx build \
          --platform linux/amd64 \
          -t wisecow:local \
          --load \
          --progress=plain \
          .
          
        echo "Image successfully built with tag: wisecow:local"

  deploy:
    needs: build
    if: github.event_name != 'pull_request'  # Skip deployment for PRs
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBERNETES_VERSION }}

    - name: Configure Kubernetes
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
        chmod 600 ~/.kube/config
        
        # Verify kubectl is working
        kubectl version --client
        kubectl cluster-info

    - name: Deploy to Kubernetes
      run: |
        # Enable debugging
        set -ex
        
        # Use the locally built image
        IMAGE_WITH_TAG="$FULL_IMAGE_NAME:$IMAGE_TAG"
        
        # Debug output
        echo "=== Deployment Information ==="
        echo "Image with tag: $IMAGE_WITH_TAG"
        
        # Create a temporary directory for modified manifests
        mkdir -p tmp_manifests
        
        # Process deployment file to use the local image
        cat k8s/deployment.yaml | \
          sed "s|image: .*|image: $IMAGE_WITH_TAG|g" > tmp_manifests/deployment.yaml
        
        # Verify the processed deployment file
        echo "=== Processed Deployment File ==="
        cat tmp_manifests/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f tmp_manifests/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        
        # Wait for rollout to complete
        kubectl rollout status deployment/wisecow -n ${{ env.KUBE_NAMESPACE }} --timeout=300s
        
        # Verify resources
        echo "\n=== Deployment Status ==="
        kubectl get deployments -n ${{ env.KUBE_NAMESPACE }}
        
        echo "\n=== Pods Status ==="
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }}
        
        echo "\n=== Service Status ==="
        kubectl get svc -n ${{ env.KUBE_NAMESPACE }}
        
        echo "\n=== Ingress Status ==="
        kubectl get ingress -n ${{ env.KUBE_NAMESPACE }}
        
        # Get application URL
        echo "\n=== Application URL ==="
        kubectl get ingress -n ${{ env.KUBE_NAMESPACE }} -o jsonpath='{.items[0].spec.rules[0].host}'

  notify:
    needs: [lint-and-test, build-and-push, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Notify Slack on failure
      if: failure()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: deployments
        SLACK_COLOR: '#ff0000'
        SLACK_ICON: https://github.com/fluidicon.png
        SLACK_MESSAGE: '❌ Deployment failed: ${{ github.workflow }}'
        SLACK_TITLE: 'Deployment Failed'
        SLACK_USERNAME: GitHub Actions
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify Slack on success
      if: success()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: deployments
        SLACK_COLOR: '#36a64f'
        SLACK_ICON: https://github.com/fluidicon.png
        SLACK_MESSAGE: '✅ Deployment successful: ${{ github.workflow }}'
        SLACK_TITLE: 'Deployment Succeeded'
        SLACK_USERNAME: GitHub Actions
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
