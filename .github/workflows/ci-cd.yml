name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: wisecow
  CONTAINER_REGISTRY: ghcr.io
  IMAGE_TAG: ${{ github.sha }}
  KUBE_NAMESPACE: wisecow
  KUBERNETES_VERSION: v1.27.0

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Lint Python files
      run: |
        pip install flake8
        flake8 scripts/ --count --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run unit tests
      run: |
        pip install pytest
        # Add your test command here when tests are available
        # pytest tests/

  build-and-push:
    needs: lint-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      id: docker_build
      run: |
        # Enable debugging
        set -x
        
        # Print environment for debugging
        echo "GitHub Repository: ${{ github.repository }}"
        echo "GitHub Actor: ${{ github.actor }}"
        echo "GitHub SHA: ${{ github.sha }}"
        
        # Set image details
        REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        IMAGE_TAG="${{ github.sha }}"
        IMAGE_NAME="${{ env.IMAGE_NAME }}"
        FULL_IMAGE_NAME="${{ env.CONTAINER_REGISTRY }}/$REPO_OWNER_LOWER/$IMAGE_NAME"
        
        echo "Building image: $FULL_IMAGE_NAME with tags: latest, $IMAGE_TAG"
        
        # Create and use buildx builder
        docker buildx create --name mybuilder --use || true
        docker buildx inspect --bootstrap
        
        # Build and push with detailed output
        docker buildx build \
          --push \
          --platform linux/amd64 \
          -t $FULL_IMAGE_NAME:latest \
          -t $FULL_IMAGE_NAME:$IMAGE_TAG \
          --cache-from=type=gha \
          --cache-to=type=gha,mode=max \
          --build-arg NODE_ENV=production \
          --progress=plain \
          .

  deploy:
    needs: build-and-push
    if: github.event_name != 'pull_request'  # Skip deployment for PRs
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBERNETES_VERSION }}

    - name: Configure Kubernetes
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
        chmod 600 ~/.kube/config
        
        # Verify kubectl is working
        kubectl version --client
        kubectl cluster-info

    - name: Deploy to Kubernetes
      run: |
        # Set image name with tag (convert repository owner to lowercase)
        REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        IMAGE_WITH_TAG="${{ env.CONTAINER_REGISTRY }}/$REPO_OWNER_LOWER/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        
        # Debug output
        echo "=== Deployment Information ==="
        echo "Repository Owner: ${{ github.repository_owner }}"
        echo "Repository Owner (lowercase): $REPO_OWNER_LOWER"
        echo "Image with tag: $IMAGE_WITH_TAG"
        
        # Create a temporary directory for modified manifests
        mkdir -p tmp_manifests
        
        # Process deployment file to replace REPO_OWNER placeholder
        sed "s|REPO_OWNER|$REPO_OWNER_LOWER|g" k8s/deployment.yaml > tmp_manifests/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f tmp_manifests/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        
        # Update the deployment with the new image
        kubectl set image deployment/wisecow \
          wisecow=$IMAGE_WITH_TAG \
          -n ${{ env.KUBE_NAMESPACE }} --record
        
        # Wait for rollout to complete
        kubectl rollout status deployment/wisecow -n ${{ env.KUBE_NAMESPACE }} --timeout=300s
        
        # Verify resources
        echo "\n=== Deployment Status ==="
        kubectl get deployments -n ${{ env.KUBE_NAMESPACE }}
        
        echo "\n=== Pods Status ==="
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }}
        
        echo "\n=== Service Status ==="
        kubectl get svc -n ${{ env.KUBE_NAMESPACE }}
        
        echo "\n=== Ingress Status ==="
        kubectl get ingress -n ${{ env.KUBE_NAMESPACE }}
        
        # Get application URL
        echo "\n=== Application URL ==="
        kubectl get ingress -n ${{ env.KUBE_NAMESPACE }} -o jsonpath='{.items[0].spec.rules[0].host}'

  notify:
    needs: [lint-and-test, build-and-push, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Notify Slack on failure
      if: failure()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: deployments
        SLACK_COLOR: '#ff0000'
        SLACK_ICON: https://github.com/fluidicon.png
        SLACK_MESSAGE: '❌ Deployment failed: ${{ github.workflow }}'
        SLACK_TITLE: 'Deployment Failed'
        SLACK_USERNAME: GitHub Actions
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify Slack on success
      if: success()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: deployments
        SLACK_COLOR: '#36a64f'
        SLACK_ICON: https://github.com/fluidicon.png
        SLACK_MESSAGE: '✅ Deployment successful: ${{ github.workflow }}'
        SLACK_TITLE: 'Deployment Succeeded'
        SLACK_USERNAME: GitHub Actions
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
