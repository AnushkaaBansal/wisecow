name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: wisecow
  KUBE_NAMESPACE: wisecow
  KUBERNETES_VERSION: v1.27.0
  CONTAINER_REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # CI Pipeline - Runs on PR and push to main
  ci:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      run: |
        # Enable debugging
        set -ex
        
        # Set image name
        IMAGE=${{ env.CONTAINER_REGISTRY }}/${{ env.REGISTRY_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        
        echo "=== Building and Pushing Image: $IMAGE ==="
        
        # Build and push the image
        docker buildx build \
          --platform linux/amd64 \
          -t $IMAGE \
          --push \
          --progress=plain \
          .
          
        echo "Image successfully built and pushed: $IMAGE"
        
    - name: Set up Kind Cluster
      uses: helm/kind-action@v1.8.0
      with:
        config: ./kind-config.yaml
        
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBERNETES_VERSION }}
        
    - name: Test Kubernetes Deployment
      run: |
        # Enable debugging
        set -ex
        
        echo "=== Testing Kubernetes Deployment ==="
        
        # Create namespace
        kubectl create namespace ${{ env.KUBE_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy application
        kubectl apply -f k8s/ -n ${{ env.KUBE_NAMESPACE }}
        
        # Wait for deployment to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/wisecow -n ${{ env.KUBE_NAMESPACE }}
        
        # Get pod status
        echo "=== Pod Status ==="
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }}
        
        # Test the application
        echo "=== Testing Application ==="
        kubectl run -i --rm --restart=Never test-curl --image=curlimages/curl -- \
          curl -s http://wisecow.wisecow.svc.cluster.local || true

  # CD Pipeline - Only runs on push to main
  cd:
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBERNETES_VERSION }}
        
    - name: Configure Kubernetes
      run: |
        # Enable debugging
        set -ex
        
        # Create .kube directory
        mkdir -p ~/.kube
        
        # Write the kubeconfig to a file
        echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
        
        # Convert the kubeconfig to the correct format if needed
        if ! kubectl --kubeconfig=kubeconfig.yaml config view -o json &>/dev/null; then
          echo "Converting kubeconfig to proper format..."
          # If the file is a JSON array, extract the first item
          if head -n 1 kubeconfig.yaml | grep -q '^\['; then
            echo "Detected array format, converting to single object..."
            # Extract the first item from the array
            tail -n +2 kubeconfig.yaml | head -n -1 > kubeconfig-temp.yaml
            mv kubeconfig-temp.yaml kubeconfig.yaml
          fi
        fi
        
        # Move the kubeconfig to the default location
        cp kubeconfig.yaml ~/.kube/config
        chmod 600 ~/.kube/config
        
        # Verify kubectl is working
        echo "=== kubectl version ==="
        kubectl version --client
        
        echo "=== kubectl cluster-info ==="
        kubectl cluster-info
        
    - name: Configure Kubernetes
      run: |
        # Enable debugging
        set -ex
        
        # Create .kube directory
        mkdir -p ~/.kube
        
        # Write the kubeconfig to a file
        echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
        
        # Convert the kubeconfig to the correct format if needed
        if ! kubectl --kubeconfig=kubeconfig.yaml config view -o json &>/dev/null; then
          echo "Converting kubeconfig to proper format..."
          # If the file is a JSON array, extract the first item
          if head -n 1 kubeconfig.yaml | grep -q '^\['; then
            echo "Detected array format, converting to single object..."
            # Extract the first item from the array
            tail -n +2 kubeconfig.yaml | head -n -1 > kubeconfig-temp.yaml
            mv kubeconfig-temp.yaml kubeconfig.yaml
          fi
        fi
        
        # Move the kubeconfig to the default location
        cp kubeconfig.yaml ~/.kube/config
        chmod 600 ~/.kube/config
        
        # Verify kubectl is working
        echo "=== kubectl version ==="
        kubectl version --client
        
        echo "=== kubectl cluster-info ==="
        kubectl cluster-info

    - name: Deploy to Kubernetes
      run: |
        # Enable debugging
        set -ex
        
        # Create a temporary directory for modified manifests
        mkdir -p tmp_manifests
        
        # Process deployment file to use the local image
        sed "s|image: .*|image: wisecow:local|" k8s/deployment.yaml > tmp_manifests/deployment.yaml
        
        # Verify the processed deployment file
        echo "=== Processed Deployment File ==="
        cat tmp_manifests/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f tmp_manifests/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        
        # Wait for rollout to complete
        kubectl rollout status deployment/wisecow -n ${{ env.KUBE_NAMESPACE }} --timeout=300s
        
        # Verify resources
        echo -e "\n=== Deployment Status ==="
        kubectl get deployments -n ${{ env.KUBE_NAMESPACE }}
        
        echo -e "\n=== Pods Status ==="
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }}
        
        echo -e "\n=== Service Status ==="
        kubectl get svc -n ${{ env.KUBE_NAMESPACE }}
        
        echo -e "\n=== Ingress Status ==="
        kubectl get ingress -n ${{ env.KUBE_NAMESPACE }}
        
        # Get application URL
        echo -e "\n=== Application URL ==="
        kubectl get ingress -n ${{ env.KUBE_NAMESPACE }} -o jsonpath='{.items[0].spec.rules[0].host}'
